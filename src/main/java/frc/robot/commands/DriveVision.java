// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import frc.robot.Convert;
import frc.robot.Limelight;
import frc.robot.Network;
import frc.robot.Robot;
import frc.robot.RobotMap;
public class DriveVision extends Command {

    private Limelight lime;
    private double lastSpeed;
    private final double maxSpeed = 0.35;//fastest while tracking
    private final double minSpeed = 0.15;//slowest while tracking
    private final double safeDist = 0;//inches distance from target before slow
    private final double pow = (4/2.0);//curve motor response when close
    private final double dead = 1.25;//angle of negligence

    public DriveVision() {
        requires(Robot.drive);
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        lime = Robot.chassis.frontLime;
        lastSpeed=Robot.drive.getDriveSpeed();
        Robot.drive.shiftSet(maxSpeed);
        lime.lightOn();
        lime.shiftPipe(1);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double forward = Robot.oi.driver.getLeftY();
        double turn = Robot.oi.driver.getRightX();
        if(lime.getTv()==1){
            double limeTurn = lime.getTx();
            limeTurn = (Math.abs(limeTurn)<dead)? 0:limeTurn;
            limeTurn /= ((30.0));//degrees -> percentage fov
            limeTurn*=3.2;
            limeTurn = ((limeTurn<0)? -1:1)*Math.pow(Math.abs(limeTurn), pow);
            turn += limeTurn;
        }
        else{
            Robot.drive.shiftSet(maxSpeed);
        }
        Robot.drive.setForward(forward);
        Robot.drive.setTurn(turn);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        Robot.drive.shiftSet(lastSpeed);
        lime.lightOff();
        lime.shiftPipe(0);
    }
}
